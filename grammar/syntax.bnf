program                     ::= declaration*

declaration                 ::= objDecl
                             | funDecl
                             | statement

accessor                    ::= IDENTIFIER ( "." IDENTIFIER )*
funDecl                     ::= "fun" IDENTIFIER "(" typedDecl ( "," typedDecl )* ")" ":" type funBody
funBody                     ::= "{" ( statement | valDecl )* "}"
returnStmt                  ::= "return" | expression ";"
objDecl                     ::= "obj" IDENTIFIER "{" ( typedDecl ";" )*  "}"
type                        ::= NUMBER_TYPE | STRING_TYPE | BOOLEAN_TYPE | NOTHING_TYPE | IDENTIFIER
typedDecl                   ::= type IDENTIFIER
valDecl                     ::= "val" IDENTIFIER "=" ( expression | objInstantiation )
objInstantiation            ::= "new" IDENTIFIER
statement                   ::= printStmt
                             | returnStmt
                             | expression

printStmt                   ::= "print" "(" expression ")" ";"
expression                  ::= assignment
assignment                  ::= accessor "=" ( accessor | equality )
equality                    ::= comparison ( ( "!=" | "==" ) comparison )*
comparison                  ::= addition ( ( ">" | ">=" | "<" | "<=" ) addition )*
addition                    ::= multiplication ( ( "-" | "+" ) multiplication )*
multiplication              ::= unary ( ( "/" | "*" | "%" ) unary )*
unary                       ::= ( "!" | "-" ) unary
                             | call

call                        ::= primary ( "(" arguments? ")" )* ";"?
arguments                   ::= expression ( "," expression )*

primary                     ::= NUMBER | STRING | BOOLEAN | "null"
                             | "(" expression ")"
                             | accessor
